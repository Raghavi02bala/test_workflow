name: Kubeflow_v1

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Name of the environment'
        required: true
      hostname:
        description: 'Name of the host'
        required: true
      initiative_id:
        description: 'Initiative Id'
        required: true
      initiative_name:
        description: 'Name of the initiative'
        required: true
      k8s_namespace:
        description: 'K8s Namespace'
        required: true
      team_name:
        description: 'Name of your team'
        required: true



jobs:
  kubeflow-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup config
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Create a branch
        run: |
          BRANCH_NAME="feature/${{ github.event.inputs.team_name }}-${{ github.event.inputs.initiative_id }}"
          git checkout -b $BRANCH_NAME

      - name: Push feature-branch to origin
        run: |
          BRANCH_NAME="feature/${{ github.event.inputs.team_name }}-${{ github.event.inputs.initiative_id }}"
          git push -u origin $BRANCH_NAME
        
      - name: Create config.json
        run: |
          mkdir -p "kubeflow-pipelines/deployments/${{ github.event.inputs.team_name }}/${{ github.event.inputs.initiative_name }}"
          echo '{
            "environment": "${{ github.event.inputs.environment }}",
            "hostname": "${{ github.event.inputs.hostname }}",
            "initiative_id": "${{ github.event.inputs.initiative_id }}",
            "initiative_name": "${{ github.event.inputs.initiative_name }}",
            "k8s_namespace": "${{ github.event.inputs.k8s_namespace }}",
            "team_name": "${{ github.event.inputs.team_name }}"
          }' > "kubeflow-pipelines/deployments/${{ github.event.inputs.team_name }}/${{ github.event.inputs.initiative_name }}/config.json"

      - name: Check for argo CD config file
        run: |
          JSON_FILE=$(find cloud-sql -type f -name "config.json" | head -n 1)
          if [ -z "$JSON_FILE" ]; then
            echo "No .json file found in cloud-sql or its subdirectories. Creating one...."
            mkdir -p "cloud-sql/deployments/${{ github.event.inputs.team_name }}"
            echo '{
            "environment": "${{ github.event.inputs.environment }}",
            "team_name": "${{ github.event.inputs.team_name }}"
          }' > "cloud-sql/deployments/${{ github.event.inputs.team_name }}/config.json"

          git fetch origin
          git add "cloud-sql/deployments/${{ github.event.inputs.team_name }}/config.json"
          else
            echo "Found .json file: $JSON_FILE"
          fi
        
      - name: Commit kubeflow instance
        run: |
          git fetch origin
          git add "kubeflow-pipelines/deployments/${{ github.event.inputs.team_name }}/${{ github.event.inputs.initiative_name }}/config.json"

      - name: Push Files
        run: |
          git commit -m 'chore:create cloud sql and kubeflow instance config files'
          
      - name: Create a pull request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: created config file
          branch: feature/${{ github.event.inputs.team_name }}-${{ github.event.inputs.initiative_id }}
          base: main

      - name: Auto merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ steps.create-pull-request.outputs.pull-request-number }} --merge --delete-branch
      
      - name: Get keycloack Acess Token
        run: |
          response=$(curl -s -X POST "https://dev.auth.mlops.ingka.com/realms/istio/protocol/openid-connect/token" \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "grant_type=client_credentials")
          access_token=$(echo "$response" | jq -r '.access_token')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
      
      - name: Create keycloak Client
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          curl -s -X POST "https://dev.auth.mlops.ingka.com/admin/realms/istio/clients" \
          -H 'Content-Type: application/json' \
          -H 'Authorization: Bearer $ACCESS_TOKEN' \
          -d '{
            "clientId": "${{ github.event.inputs.initiative_id }}",
            "rootUrl": "http://${{ github.event.inputs.initiative_id }}.${{ github.event.inputs.team_name }}.${{ github.event.inputs.environment }}.mlops.ingka.com",
            "redirectUris": [
              "http://${{ github.event.inputs.initiative_id }}.${{ github.event.inputs.team_name }}.${{ github.event.inputs.environment }}.mlops.ingka.com"
            ]
          }'

          
